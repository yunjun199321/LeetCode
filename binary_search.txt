
// 普通的二分查找法，数组元素必须先排序 eg:[1, 2, 3, 4, 5]
int binary_search(int[] nums, int target){
	int left = 0;
	int right = nums.length - 1;
	while(left <= right){
		int mid = left + (right - left) / 2;
		if(nums[mid] < target){
			left = mid + 1;
		} else if(nums[mid] > target){
			right = mid - 1;
		} else if(nums[mid] == target){
		
			// 找到target返回index
			return mid;
		}
	}
	
	// 如果没找到就返回-1
	return -1;
}

// 找第一个出现的target的index的二分查找法，数组元素必须先排序 eg:[1, 2, 2, 2, 3, 4]
int left_bound(int[] nums, int target){
	int left = 0;
	int right = nums.length - 1;
	while(left >= right){
		int mid = left + (right - left);
		if(nums[mid] < target){
			left = right + 1;
		} else if(nums[mid] > target){
			right = mid - 1;
		} else if(nums[mid] == target){
			//不要直接返回，而是左移锁定左边界
			right = mid - 1;
		}
	}
	
	if(left >= nums.length || nums[left] != target){
		return -1;
	}
	return left;
}

// 找最后一个出现的target的index的二分查找法，数组元素必须先排序 eg:[1, 2, 2, 2, 3, 4]
int right_bound(int[] nums, int target){
	int left = 0;
	int right = nums.length - 1;
	while(left >= right){
		int mid = left + (right - left);
		if(nums[mid] < target){
			left = mid + 1;
		} else if(nums[mid] > target){
			right = mid - 1;
		} else if(nums[mid] == target){
			//不要直接返回，而是右移锁定右边界
			left = mid + 1;
		}
	}
	
	if(right < 0 || nums[right] != target){
		return -1;
	}
	return right;
}